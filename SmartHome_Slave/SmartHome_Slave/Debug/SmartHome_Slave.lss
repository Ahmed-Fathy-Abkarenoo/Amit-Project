
SmartHome_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000b46  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000bda  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00002d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e7d  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a0  00000000  00000000  00003d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000976  00000000  00000000  000042ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00004c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  00004ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000639  00000000  00000000  0000529a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 03 	call	0x788	; 0x788 <main>
  8a:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <send_falling_edge>:
	LCD_vSendCmd('a',temp);
}

static void send_falling_edge(void)
{
	DIO_vWritepin('b',EN,1);
  92:	82 e6       	ldi	r24, 0x62	; 98
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	63 e0       	ldi	r22, 0x03	; 3
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vWritepin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f e1       	ldi	r24, 0x1F	; 31
  a4:	9e e4       	ldi	r25, 0x4E	; 78
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <send_falling_edge+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <send_falling_edge+0x1a>
  ac:	00 00       	nop
	_delay_ms(5);
	DIO_vWritepin('b',EN,0);
  ae:	82 e6       	ldi	r24, 0x62	; 98
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	63 e0       	ldi	r22, 0x03	; 3
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vWritepin>
  be:	8f e1       	ldi	r24, 0x1F	; 31
  c0:	9e e4       	ldi	r25, 0x4E	; 78
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <send_falling_edge+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <send_falling_edge+0x36>
  c8:	00 00       	nop
	_delay_ms(5);
}
  ca:	08 95       	ret

000000cc <LCD_vSendCmd>:
	
	_delay_ms(20);
}

void LCD_vSendCmd(uint8 portname, uint8 Cmd)
{
  cc:	cf 93       	push	r28
  ce:	c6 2f       	mov	r28, r22
	PORT_NAME&=0x0f;
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	8b bb       	out	0x1b, r24	; 27
	PORT_NAME |= (Cmd&0xf0);           /*put data on data lines*/
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	96 2f       	mov	r25, r22
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	89 2b       	or	r24, r25
  de:	8b bb       	out	0x1b, r24	; 27
	DIO_vWritepin('b',RS,0);       /*choose RS=0*/
  e0:	82 e6       	ldi	r24, 0x62	; 98
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vWritepin>
	send_falling_edge();           /*send falling edge*/
  f0:	0e 94 49 00 	call	0x92	; 0x92 <send_falling_edge>
	
	PORT_NAME&=0x0f;
  f4:	8b b3       	in	r24, 0x1b	; 27
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	8b bb       	out	0x1b, r24	; 27
	PORT_NAME|=(Cmd<<4);
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	c2 95       	swap	r28
  fe:	c0 7f       	andi	r28, 0xF0	; 240
 100:	c8 2b       	or	r28, r24
 102:	cb bb       	out	0x1b, r28	; 27
	DIO_vWritepin('b',RS,0); 
 104:	82 e6       	ldi	r24, 0x62	; 98
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vWritepin>
	send_falling_edge();
 114:	0e 94 49 00 	call	0x92	; 0x92 <send_falling_edge>
}
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <LCD_vInit>:
}

#else             /*LCD_4_BIT*/
void LCD_vInit(void)
{
	DIO_vSetPortDir('b',0x0E);         /*EN/RS/RW*/
 11c:	82 e6       	ldi	r24, 0x62	; 98
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	6e e0       	ldi	r22, 0x0E	; 14
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_vSetPortDir>
	DIO_vSetPortDir('a',0xf0);
 128:	81 e6       	ldi	r24, 0x61	; 97
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	60 ef       	ldi	r22, 0xF0	; 240
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_vSetPortDir>
	
	DIO_vWritepin('b',RW,0);
 134:	82 e6       	ldi	r24, 0x62	; 98
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vWritepin>
	
	LCD_vSendCmd('a', 0x033);         /*Initialization*/
 144:	81 e6       	ldi	r24, 0x61	; 97
 146:	63 e3       	ldi	r22, 0x33	; 51
 148:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_vSendCmd>
	LCD_vSendCmd('a', 0x032);
 14c:	81 e6       	ldi	r24, 0x61	; 97
 14e:	62 e3       	ldi	r22, 0x32	; 50
 150:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_vSendCmd>
	LCD_vSendCmd('a', 0x028);
 154:	81 e6       	ldi	r24, 0x61	; 97
 156:	68 e2       	ldi	r22, 0x28	; 40
 158:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_vSendCmd>
	LCD_vSendCmd('a', 0x01);          /*clear screen*/
 15c:	81 e6       	ldi	r24, 0x61	; 97
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_vSendCmd>
	LCD_vSendCmd('a', 0x0F);          /*blink cursor*/
 164:	81 e6       	ldi	r24, 0x61	; 97
 166:	6f e0       	ldi	r22, 0x0F	; 15
 168:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_vSendCmd>
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	99 ef       	ldi	r25, 0xF9	; 249
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	81 50       	subi	r24, 0x01	; 1
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	a0 40       	sbci	r26, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <LCD_vInit+0x56>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_vInit+0x60>
 17c:	00 00       	nop
	
	_delay_ms(20);
}
 17e:	08 95       	ret

00000180 <LCD_vMoveCursor>:
}

void LCD_vMoveCursor(uint8 row, uint8 col)
{
	uint8 temp;
	if(row==0)
 180:	88 23       	and	r24, r24
 182:	11 f4       	brne	.+4      	; 0x188 <LCD_vMoveCursor+0x8>
{temp=0x80+col;}    /*0x80-0x8f*/
 184:	60 58       	subi	r22, 0x80	; 128
 186:	01 c0       	rjmp	.+2      	; 0x18a <LCD_vMoveCursor+0xa>
	else
{temp=0xc0+col;}    /*0xc0-0xcf*/
 188:	60 54       	subi	r22, 0x40	; 64
	LCD_vSendCmd('a',temp);
 18a:	81 e6       	ldi	r24, 0x61	; 97
 18c:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_vSendCmd>
}
 190:	08 95       	ret

00000192 <LCD_vClearDisplay>:
	_delay_ms(5);
}

void LCD_vClearDisplay()
{
	LCD_vSendCmd('a', 0x01);          /*clear screen*/
 192:	81 e6       	ldi	r24, 0x61	; 97
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_vSendCmd>
	LCD_vSendCmd('a', 0x0F);          /*blink cursor*/
 19a:	81 e6       	ldi	r24, 0x61	; 97
 19c:	6f e0       	ldi	r22, 0x0F	; 15
 19e:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_vSendCmd>
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	99 ef       	ldi	r25, 0xF9	; 249
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	81 50       	subi	r24, 0x01	; 1
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	a0 40       	sbci	r26, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <LCD_vClearDisplay+0x16>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_vClearDisplay+0x20>
 1b2:	00 00       	nop
	_delay_ms(20);
}
 1b4:	08 95       	ret

000001b6 <LCD_vNewLine>:

void LCD_vNewLine()
{
	counter++;
 1b6:	80 91 61 00 	lds	r24, 0x0061
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 61 00 	sts	0x0061, r24
	
	if (counter == 16)
 1c0:	80 31       	cpi	r24, 0x10	; 16
 1c2:	e9 f4       	brne	.+58     	; 0x1fe <LCD_vNewLine+0x48>
	{
		if (Line_NO == 1)
 1c4:	80 91 60 00 	lds	r24, 0x0060
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <LCD_vNewLine+0x32>
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	91 ee       	ldi	r25, 0xE1	; 225
 1d0:	a4 e0       	ldi	r26, 0x04	; 4
 1d2:	81 50       	subi	r24, 0x01	; 1
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	a0 40       	sbci	r26, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <LCD_vNewLine+0x1c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_vNewLine+0x26>
 1dc:	00 00       	nop
		{
			_delay_ms(100);
			LCD_vClearDisplay();
 1de:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_vClearDisplay>
			Line_NO = 0;
 1e2:	10 92 60 00 	sts	0x0060, r1
 1e6:	08 95       	ret
		}
		else
		{
			LCD_vMoveCursor(1,0);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_vMoveCursor>
			counter = 0;
 1f0:	10 92 61 00 	sts	0x0061, r1
			Line_NO++;
 1f4:	80 91 60 00 	lds	r24, 0x0060
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 60 00 	sts	0x0060, r24
 1fe:	08 95       	ret

00000200 <LCD_vSendChar>:
	DIO_vWritepin('b',RS,0); 
	send_falling_edge();
}

void LCD_vSendChar(uint8 PoNa, uint8 Data)
{
 200:	cf 93       	push	r28
 202:	c6 2f       	mov	r28, r22
	PORT_NAME&=0x0f;
 204:	8b b3       	in	r24, 0x1b	; 27
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	8b bb       	out	0x1b, r24	; 27
	PORT_NAME |= (Data&0xf0);          /*put data on data lines*/
 20a:	8b b3       	in	r24, 0x1b	; 27
 20c:	96 2f       	mov	r25, r22
 20e:	90 7f       	andi	r25, 0xF0	; 240
 210:	89 2b       	or	r24, r25
 212:	8b bb       	out	0x1b, r24	; 27
	DIO_vWritepin('b',RS,1);          /*choose RS=0*/
 214:	82 e6       	ldi	r24, 0x62	; 98
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vWritepin>
	send_falling_edge();           /*send falling edge*/
 224:	0e 94 49 00 	call	0x92	; 0x92 <send_falling_edge>
	
	PORT_NAME&=0x0f;
 228:	8b b3       	in	r24, 0x1b	; 27
 22a:	8f 70       	andi	r24, 0x0F	; 15
 22c:	8b bb       	out	0x1b, r24	; 27
	PORT_NAME|=(Data<<4);
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	c2 95       	swap	r28
 232:	c0 7f       	andi	r28, 0xF0	; 240
 234:	c8 2b       	or	r28, r24
 236:	cb bb       	out	0x1b, r28	; 27
	DIO_vWritepin('b',RS,1); 
 238:	82 e6       	ldi	r24, 0x62	; 98
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vWritepin>
	send_falling_edge();
 248:	0e 94 49 00 	call	0x92	; 0x92 <send_falling_edge>
	
	LCD_vNewLine();
 24c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vNewLine>
}
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <LCD_vSendString>:
#endif

void LCD_vSendString(uint8 *str)
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	ec 01       	movw	r28, r24
	while(*str)
 25a:	68 81       	ld	r22, Y
 25c:	66 23       	and	r22, r22
 25e:	39 f0       	breq	.+14     	; 0x26e <LCD_vSendString+0x1a>
	
	LCD_vNewLine();
}
#endif

void LCD_vSendString(uint8 *str)
 260:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str)
{LCD_vSendChar('a',*str++);}
 262:	81 e6       	ldi	r24, 0x61	; 97
 264:	0e 94 00 01 	call	0x200	; 0x200 <LCD_vSendChar>
}
#endif

void LCD_vSendString(uint8 *str)
{
	while(*str)
 268:	69 91       	ld	r22, Y+
 26a:	66 23       	and	r22, r22
 26c:	d1 f7       	brne	.-12     	; 0x262 <LCD_vSendString+0xe>
{LCD_vSendChar('a',*str++);}
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <LED_vInit>:

#include "LED.h"

void LED_vInit(uint8 portname, uint8 pinnumber)
{
	DIO_vSetPinDir(portname ,pinnumber ,1 );
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_vSetPinDir>
}
 280:	08 95       	ret

00000282 <LED_vTurnon>:

void LED_vTurnon(uint8 portname, uint8 pinnumber)
{
	DIO_vWritepin(portname, pinnumber, 1);
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vWritepin>
}
 28e:	08 95       	ret

00000290 <LED_vTurnoff>:

void LED_vTurnoff(uint8 portname, uint8 pinnumber)
{
	DIO_vWritepin(portname, pinnumber, 0);
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vWritepin>
}
 29c:	08 95       	ret

0000029e <LED_vToggle>:

void LED_vToggle(uint8 portname, uint8 pinnumber)
{
	DIO_vTogglepin(portname, pinnumber);
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_vTogglepin>
 2a6:	08 95       	ret

000002a8 <ADC_vTnit>:
	
	/*Enable ADC*/
	//SET_BIT(ADCSRA,ADEN);
	
	/*The ADC is enabled by setting the ADC Enable bit, ADEN in ADCSRA*/
	ADCSRA |= (1<<ADEN);
 2a8:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS1);
 2aa:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA |= (1<<ADPS2);
 2ac:	32 9a       	sbi	0x06, 2	; 6
	
	/*interrupt on*/
	ADCSRA |= (1<<ADIE);
 2ae:	33 9a       	sbi	0x06, 3	; 6
	
	//ADMUX |= (1<<ADLAR);
}
 2b0:	08 95       	ret

000002b2 <ADC_vStartConversion>:
	//return temp;
//}

void ADC_vStartConversion(void)
{
	ADCSRA |= (1<<ADSC);
 2b2:	36 9a       	sbi	0x06, 6	; 6
 2b4:	08 95       	ret

000002b6 <DIO_vSetPinDir>:
#include "DIO.h"
#include <avr/io.h>

void DIO_vSetPinDir(uint8 portName, uint8 pinNum, uint8 dir)
{
	switch(portName)
 2b6:	84 34       	cpi	r24, 0x44	; 68
 2b8:	09 f4       	brne	.+2      	; 0x2bc <DIO_vSetPinDir+0x6>
 2ba:	71 c0       	rjmp	.+226    	; 0x39e <DIO_vSetPinDir+0xe8>
 2bc:	85 34       	cpi	r24, 0x45	; 69
 2be:	48 f4       	brcc	.+18     	; 0x2d2 <DIO_vSetPinDir+0x1c>
 2c0:	82 34       	cpi	r24, 0x42	; 66
 2c2:	99 f1       	breq	.+102    	; 0x32a <DIO_vSetPinDir+0x74>
 2c4:	83 34       	cpi	r24, 0x43	; 67
 2c6:	08 f0       	brcs	.+2      	; 0x2ca <DIO_vSetPinDir+0x14>
 2c8:	4d c0       	rjmp	.+154    	; 0x364 <DIO_vSetPinDir+0xae>
 2ca:	81 34       	cpi	r24, 0x41	; 65
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <DIO_vSetPinDir+0x1a>
 2ce:	83 c0       	rjmp	.+262    	; 0x3d6 <DIO_vSetPinDir+0x120>
 2d0:	0f c0       	rjmp	.+30     	; 0x2f0 <DIO_vSetPinDir+0x3a>
 2d2:	82 36       	cpi	r24, 0x62	; 98
 2d4:	51 f1       	breq	.+84     	; 0x32a <DIO_vSetPinDir+0x74>
 2d6:	83 36       	cpi	r24, 0x63	; 99
 2d8:	20 f4       	brcc	.+8      	; 0x2e2 <DIO_vSetPinDir+0x2c>
 2da:	81 36       	cpi	r24, 0x61	; 97
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <DIO_vSetPinDir+0x2a>
 2de:	7b c0       	rjmp	.+246    	; 0x3d6 <DIO_vSetPinDir+0x120>
 2e0:	07 c0       	rjmp	.+14     	; 0x2f0 <DIO_vSetPinDir+0x3a>
 2e2:	83 36       	cpi	r24, 0x63	; 99
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <DIO_vSetPinDir+0x32>
 2e6:	3e c0       	rjmp	.+124    	; 0x364 <DIO_vSetPinDir+0xae>
 2e8:	84 36       	cpi	r24, 0x64	; 100
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_vSetPinDir+0x38>
 2ec:	74 c0       	rjmp	.+232    	; 0x3d6 <DIO_vSetPinDir+0x120>
 2ee:	57 c0       	rjmp	.+174    	; 0x39e <DIO_vSetPinDir+0xe8>
	{
		case'a':
		case'A':
		if(1==dir)
 2f0:	41 30       	cpi	r20, 0x01	; 1
 2f2:	69 f4       	brne	.+26     	; 0x30e <DIO_vSetPinDir+0x58>
	{DDRA |=(1<<pinNum);}
 2f4:	2a b3       	in	r18, 0x1a	; 26
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	ac 01       	movw	r20, r24
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_vSetPinDir+0x4c>
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_vSetPinDir+0x48>
 306:	ba 01       	movw	r22, r20
 308:	62 2b       	or	r22, r18
 30a:	6a bb       	out	0x1a, r22	; 26
 30c:	08 95       	ret
		else
	{DDRA &=~(1<<pinNum);}
 30e:	2a b3       	in	r18, 0x1a	; 26
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	ac 01       	movw	r20, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_vSetPinDir+0x66>
 318:	44 0f       	add	r20, r20
 31a:	55 1f       	adc	r21, r21
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_vSetPinDir+0x62>
 320:	ba 01       	movw	r22, r20
 322:	60 95       	com	r22
 324:	62 23       	and	r22, r18
 326:	6a bb       	out	0x1a, r22	; 26
 328:	08 95       	ret
		break;
		
		case'b':
		case'B':
		if(1==dir)
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	69 f4       	brne	.+26     	; 0x348 <DIO_vSetPinDir+0x92>
	{DDRB |=(1<<pinNum);}
 32e:	27 b3       	in	r18, 0x17	; 23
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	ac 01       	movw	r20, r24
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_vSetPinDir+0x86>
 338:	44 0f       	add	r20, r20
 33a:	55 1f       	adc	r21, r21
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_vSetPinDir+0x82>
 340:	ba 01       	movw	r22, r20
 342:	62 2b       	or	r22, r18
 344:	67 bb       	out	0x17, r22	; 23
 346:	08 95       	ret
		else
	{DDRB &=~(1<<pinNum);}
 348:	27 b3       	in	r18, 0x17	; 23
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_vSetPinDir+0xa0>
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_vSetPinDir+0x9c>
 35a:	ba 01       	movw	r22, r20
 35c:	60 95       	com	r22
 35e:	62 23       	and	r22, r18
 360:	67 bb       	out	0x17, r22	; 23
 362:	08 95       	ret
		break;
		
		case'c':
		case'C':
		if(1==dir)
 364:	41 30       	cpi	r20, 0x01	; 1
 366:	69 f4       	brne	.+26     	; 0x382 <DIO_vSetPinDir+0xcc>
	{DDRC |=(1<<pinNum);}
 368:	24 b3       	in	r18, 0x14	; 20
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_vSetPinDir+0xc0>
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_vSetPinDir+0xbc>
 37a:	ba 01       	movw	r22, r20
 37c:	62 2b       	or	r22, r18
 37e:	64 bb       	out	0x14, r22	; 20
 380:	08 95       	ret
		else
	{DDRC &=~(1<<pinNum);}
 382:	24 b3       	in	r18, 0x14	; 20
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_vSetPinDir+0xda>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_vSetPinDir+0xd6>
 394:	ba 01       	movw	r22, r20
 396:	60 95       	com	r22
 398:	62 23       	and	r22, r18
 39a:	64 bb       	out	0x14, r22	; 20
 39c:	08 95       	ret
		break;
		
		case'd':
		case'D':
		if(1==dir)
 39e:	41 30       	cpi	r20, 0x01	; 1
 3a0:	69 f4       	brne	.+26     	; 0x3bc <DIO_vSetPinDir+0x106>
	{DDRD |=(1<<pinNum);}
 3a2:	21 b3       	in	r18, 0x11	; 17
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	ac 01       	movw	r20, r24
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_vSetPinDir+0xfa>
 3ac:	44 0f       	add	r20, r20
 3ae:	55 1f       	adc	r21, r21
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_vSetPinDir+0xf6>
 3b4:	ba 01       	movw	r22, r20
 3b6:	62 2b       	or	r22, r18
 3b8:	61 bb       	out	0x11, r22	; 17
 3ba:	08 95       	ret
		else
	{DDRD &=~(1<<pinNum);}
 3bc:	21 b3       	in	r18, 0x11	; 17
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	ac 01       	movw	r20, r24
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_vSetPinDir+0x114>
 3c6:	44 0f       	add	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_vSetPinDir+0x110>
 3ce:	ba 01       	movw	r22, r20
 3d0:	60 95       	com	r22
 3d2:	62 23       	and	r22, r18
 3d4:	61 bb       	out	0x11, r22	; 17
 3d6:	08 95       	ret

000003d8 <DIO_vWritepin>:
	
}

void DIO_vWritepin(uint8 portName, uint8 pinNum, uint8 pinvalue)
{
	switch(portName)
 3d8:	84 34       	cpi	r24, 0x44	; 68
 3da:	09 f4       	brne	.+2      	; 0x3de <DIO_vWritepin+0x6>
 3dc:	71 c0       	rjmp	.+226    	; 0x4c0 <DIO_vWritepin+0xe8>
 3de:	85 34       	cpi	r24, 0x45	; 69
 3e0:	48 f4       	brcc	.+18     	; 0x3f4 <DIO_vWritepin+0x1c>
 3e2:	82 34       	cpi	r24, 0x42	; 66
 3e4:	99 f1       	breq	.+102    	; 0x44c <DIO_vWritepin+0x74>
 3e6:	83 34       	cpi	r24, 0x43	; 67
 3e8:	08 f0       	brcs	.+2      	; 0x3ec <DIO_vWritepin+0x14>
 3ea:	4d c0       	rjmp	.+154    	; 0x486 <DIO_vWritepin+0xae>
 3ec:	81 34       	cpi	r24, 0x41	; 65
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <DIO_vWritepin+0x1a>
 3f0:	83 c0       	rjmp	.+262    	; 0x4f8 <DIO_vWritepin+0x120>
 3f2:	0f c0       	rjmp	.+30     	; 0x412 <DIO_vWritepin+0x3a>
 3f4:	82 36       	cpi	r24, 0x62	; 98
 3f6:	51 f1       	breq	.+84     	; 0x44c <DIO_vWritepin+0x74>
 3f8:	83 36       	cpi	r24, 0x63	; 99
 3fa:	20 f4       	brcc	.+8      	; 0x404 <DIO_vWritepin+0x2c>
 3fc:	81 36       	cpi	r24, 0x61	; 97
 3fe:	09 f0       	breq	.+2      	; 0x402 <DIO_vWritepin+0x2a>
 400:	7b c0       	rjmp	.+246    	; 0x4f8 <DIO_vWritepin+0x120>
 402:	07 c0       	rjmp	.+14     	; 0x412 <DIO_vWritepin+0x3a>
 404:	83 36       	cpi	r24, 0x63	; 99
 406:	09 f4       	brne	.+2      	; 0x40a <DIO_vWritepin+0x32>
 408:	3e c0       	rjmp	.+124    	; 0x486 <DIO_vWritepin+0xae>
 40a:	84 36       	cpi	r24, 0x64	; 100
 40c:	09 f0       	breq	.+2      	; 0x410 <DIO_vWritepin+0x38>
 40e:	74 c0       	rjmp	.+232    	; 0x4f8 <DIO_vWritepin+0x120>
 410:	57 c0       	rjmp	.+174    	; 0x4c0 <DIO_vWritepin+0xe8>
	{
		case'a':
		case'A':
		if(1==pinvalue)
 412:	41 30       	cpi	r20, 0x01	; 1
 414:	69 f4       	brne	.+26     	; 0x430 <DIO_vWritepin+0x58>
	{PORTA |=(1<<pinNum);}
 416:	2b b3       	in	r18, 0x1b	; 27
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	ac 01       	movw	r20, r24
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_vWritepin+0x4c>
 420:	44 0f       	add	r20, r20
 422:	55 1f       	adc	r21, r21
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_vWritepin+0x48>
 428:	ba 01       	movw	r22, r20
 42a:	62 2b       	or	r22, r18
 42c:	6b bb       	out	0x1b, r22	; 27
 42e:	08 95       	ret
		else
	{PORTA &=~(1<<pinNum);}
 430:	2b b3       	in	r18, 0x1b	; 27
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	ac 01       	movw	r20, r24
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_vWritepin+0x66>
 43a:	44 0f       	add	r20, r20
 43c:	55 1f       	adc	r21, r21
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_vWritepin+0x62>
 442:	ba 01       	movw	r22, r20
 444:	60 95       	com	r22
 446:	62 23       	and	r22, r18
 448:	6b bb       	out	0x1b, r22	; 27
 44a:	08 95       	ret
		break;
		
		case'b':
		case'B':
		if(1==pinvalue)
 44c:	41 30       	cpi	r20, 0x01	; 1
 44e:	69 f4       	brne	.+26     	; 0x46a <DIO_vWritepin+0x92>
	{PORTB |=(1<<pinNum);}
 450:	28 b3       	in	r18, 0x18	; 24
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	ac 01       	movw	r20, r24
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_vWritepin+0x86>
 45a:	44 0f       	add	r20, r20
 45c:	55 1f       	adc	r21, r21
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_vWritepin+0x82>
 462:	ba 01       	movw	r22, r20
 464:	62 2b       	or	r22, r18
 466:	68 bb       	out	0x18, r22	; 24
 468:	08 95       	ret
		else
	{PORTB &=~(1<<pinNum);}
 46a:	28 b3       	in	r18, 0x18	; 24
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	ac 01       	movw	r20, r24
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_vWritepin+0xa0>
 474:	44 0f       	add	r20, r20
 476:	55 1f       	adc	r21, r21
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_vWritepin+0x9c>
 47c:	ba 01       	movw	r22, r20
 47e:	60 95       	com	r22
 480:	62 23       	and	r22, r18
 482:	68 bb       	out	0x18, r22	; 24
 484:	08 95       	ret
		break;
		
		case'c':
		case'C':
		if(1==pinvalue)
 486:	41 30       	cpi	r20, 0x01	; 1
 488:	69 f4       	brne	.+26     	; 0x4a4 <DIO_vWritepin+0xcc>
	{PORTC |=(1<<pinNum);}
 48a:	25 b3       	in	r18, 0x15	; 21
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	ac 01       	movw	r20, r24
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_vWritepin+0xc0>
 494:	44 0f       	add	r20, r20
 496:	55 1f       	adc	r21, r21
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_vWritepin+0xbc>
 49c:	ba 01       	movw	r22, r20
 49e:	62 2b       	or	r22, r18
 4a0:	65 bb       	out	0x15, r22	; 21
 4a2:	08 95       	ret
		else
	{PORTC &=~(1<<pinNum);}
 4a4:	25 b3       	in	r18, 0x15	; 21
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	ac 01       	movw	r20, r24
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_vWritepin+0xda>
 4ae:	44 0f       	add	r20, r20
 4b0:	55 1f       	adc	r21, r21
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_vWritepin+0xd6>
 4b6:	ba 01       	movw	r22, r20
 4b8:	60 95       	com	r22
 4ba:	62 23       	and	r22, r18
 4bc:	65 bb       	out	0x15, r22	; 21
 4be:	08 95       	ret
		break;
		
		case'd':
		case'D':
		if(1==pinvalue)
 4c0:	41 30       	cpi	r20, 0x01	; 1
 4c2:	69 f4       	brne	.+26     	; 0x4de <DIO_vWritepin+0x106>
	{PORTD |=(1<<pinNum);}
 4c4:	22 b3       	in	r18, 0x12	; 18
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	ac 01       	movw	r20, r24
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_vWritepin+0xfa>
 4ce:	44 0f       	add	r20, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_vWritepin+0xf6>
 4d6:	ba 01       	movw	r22, r20
 4d8:	62 2b       	or	r22, r18
 4da:	62 bb       	out	0x12, r22	; 18
 4dc:	08 95       	ret
		else
	{PORTD &=~(1<<pinNum);}
 4de:	22 b3       	in	r18, 0x12	; 18
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	ac 01       	movw	r20, r24
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_vWritepin+0x114>
 4e8:	44 0f       	add	r20, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_vWritepin+0x110>
 4f0:	ba 01       	movw	r22, r20
 4f2:	60 95       	com	r22
 4f4:	62 23       	and	r22, r18
 4f6:	62 bb       	out	0x12, r22	; 18
 4f8:	08 95       	ret

000004fa <DIO_u8Readpin>:

uint8 DIO_u8Readpin(uint8 portName, uint8 pinNum)
{
	char temp = 0;
	
	switch(portName)
 4fa:	84 34       	cpi	r24, 0x44	; 68
 4fc:	09 f4       	brne	.+2      	; 0x500 <DIO_u8Readpin+0x6>
 4fe:	4e c0       	rjmp	.+156    	; 0x59c <DIO_u8Readpin+0xa2>
 500:	85 34       	cpi	r24, 0x45	; 69
 502:	40 f4       	brcc	.+16     	; 0x514 <DIO_u8Readpin+0x1a>
 504:	82 34       	cpi	r24, 0x42	; 66
 506:	31 f1       	breq	.+76     	; 0x554 <DIO_u8Readpin+0x5a>
 508:	83 34       	cpi	r24, 0x43	; 67
 50a:	b0 f5       	brcc	.+108    	; 0x578 <DIO_u8Readpin+0x7e>
 50c:	81 34       	cpi	r24, 0x41	; 65
 50e:	09 f0       	breq	.+2      	; 0x512 <DIO_u8Readpin+0x18>
 510:	57 c0       	rjmp	.+174    	; 0x5c0 <DIO_u8Readpin+0xc6>
 512:	0e c0       	rjmp	.+28     	; 0x530 <DIO_u8Readpin+0x36>
 514:	82 36       	cpi	r24, 0x62	; 98
 516:	f1 f0       	breq	.+60     	; 0x554 <DIO_u8Readpin+0x5a>
 518:	83 36       	cpi	r24, 0x63	; 99
 51a:	20 f4       	brcc	.+8      	; 0x524 <DIO_u8Readpin+0x2a>
 51c:	81 36       	cpi	r24, 0x61	; 97
 51e:	09 f0       	breq	.+2      	; 0x522 <DIO_u8Readpin+0x28>
 520:	4f c0       	rjmp	.+158    	; 0x5c0 <DIO_u8Readpin+0xc6>
 522:	06 c0       	rjmp	.+12     	; 0x530 <DIO_u8Readpin+0x36>
 524:	83 36       	cpi	r24, 0x63	; 99
 526:	41 f1       	breq	.+80     	; 0x578 <DIO_u8Readpin+0x7e>
 528:	84 36       	cpi	r24, 0x64	; 100
 52a:	09 f0       	breq	.+2      	; 0x52e <DIO_u8Readpin+0x34>
 52c:	49 c0       	rjmp	.+146    	; 0x5c0 <DIO_u8Readpin+0xc6>
 52e:	36 c0       	rjmp	.+108    	; 0x59c <DIO_u8Readpin+0xa2>
	{
		case'a':
		case'A':
		temp = (PINA&(1<<pinNum))>>pinNum;
 530:	29 b3       	in	r18, 0x19	; 25
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	06 2e       	mov	r0, r22
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_u8Readpin+0x44>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_u8Readpin+0x40>
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	82 23       	and	r24, r18
 546:	93 23       	and	r25, r19
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_u8Readpin+0x54>
 54a:	95 95       	asr	r25
 54c:	87 95       	ror	r24
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_u8Readpin+0x50>
		break;
 552:	08 95       	ret
		
		case'b':
		case'B':
		temp = (PINB&(1<<pinNum))>>pinNum;
 554:	26 b3       	in	r18, 0x16	; 22
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	06 2e       	mov	r0, r22
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_u8Readpin+0x68>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_u8Readpin+0x64>
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	82 23       	and	r24, r18
 56a:	93 23       	and	r25, r19
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_u8Readpin+0x78>
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_u8Readpin+0x74>
		break;
 576:	08 95       	ret
		
		case'c':
		case'C':
		temp = (PINC&(1<<pinNum))>>pinNum;
 578:	23 b3       	in	r18, 0x13	; 19
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	06 2e       	mov	r0, r22
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_u8Readpin+0x8c>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_u8Readpin+0x88>
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	82 23       	and	r24, r18
 58e:	93 23       	and	r25, r19
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_u8Readpin+0x9c>
 592:	95 95       	asr	r25
 594:	87 95       	ror	r24
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_u8Readpin+0x98>
		break;
 59a:	08 95       	ret
		
		case'd':
		case'D':
		temp = (PIND&(1<<pinNum))>>pinNum;
 59c:	20 b3       	in	r18, 0x10	; 16
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	06 2e       	mov	r0, r22
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_u8Readpin+0xb0>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	0a 94       	dec	r0
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_u8Readpin+0xac>
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	82 23       	and	r24, r18
 5b2:	93 23       	and	r25, r19
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_u8Readpin+0xc0>
 5b6:	95 95       	asr	r25
 5b8:	87 95       	ror	r24
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_u8Readpin+0xbc>
		break;
 5be:	08 95       	ret
	}
}

uint8 DIO_u8Readpin(uint8 portName, uint8 pinNum)
{
	char temp = 0;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
		case'D':
		temp = (PIND&(1<<pinNum))>>pinNum;
		break;
	}
	return temp;
}
 5c2:	08 95       	ret

000005c4 <DIO_vTogglepin>:

void DIO_vTogglepin(uint8 portname, uint8 pinNum)
{
	switch(portname)
 5c4:	84 34       	cpi	r24, 0x44	; 68
 5c6:	09 f4       	brne	.+2      	; 0x5ca <DIO_vTogglepin+0x6>
 5c8:	3d c0       	rjmp	.+122    	; 0x644 <DIO_vTogglepin+0x80>
 5ca:	85 34       	cpi	r24, 0x45	; 69
 5cc:	40 f4       	brcc	.+16     	; 0x5de <DIO_vTogglepin+0x1a>
 5ce:	82 34       	cpi	r24, 0x42	; 66
 5d0:	f9 f0       	breq	.+62     	; 0x610 <DIO_vTogglepin+0x4c>
 5d2:	83 34       	cpi	r24, 0x43	; 67
 5d4:	50 f5       	brcc	.+84     	; 0x62a <DIO_vTogglepin+0x66>
 5d6:	81 34       	cpi	r24, 0x41	; 65
 5d8:	09 f0       	breq	.+2      	; 0x5dc <DIO_vTogglepin+0x18>
 5da:	40 c0       	rjmp	.+128    	; 0x65c <DIO_vTogglepin+0x98>
 5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <DIO_vTogglepin+0x32>
 5de:	82 36       	cpi	r24, 0x62	; 98
 5e0:	b9 f0       	breq	.+46     	; 0x610 <DIO_vTogglepin+0x4c>
 5e2:	83 36       	cpi	r24, 0x63	; 99
 5e4:	18 f4       	brcc	.+6      	; 0x5ec <DIO_vTogglepin+0x28>
 5e6:	81 36       	cpi	r24, 0x61	; 97
 5e8:	c9 f5       	brne	.+114    	; 0x65c <DIO_vTogglepin+0x98>
 5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <DIO_vTogglepin+0x32>
 5ec:	83 36       	cpi	r24, 0x63	; 99
 5ee:	e9 f0       	breq	.+58     	; 0x62a <DIO_vTogglepin+0x66>
 5f0:	84 36       	cpi	r24, 0x64	; 100
 5f2:	a1 f5       	brne	.+104    	; 0x65c <DIO_vTogglepin+0x98>
 5f4:	27 c0       	rjmp	.+78     	; 0x644 <DIO_vTogglepin+0x80>
	{
		case'a':
		case'A':
	PORTA ^=(1<<pinNum);
 5f6:	2b b3       	in	r18, 0x1b	; 27
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	ac 01       	movw	r20, r24
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_vTogglepin+0x40>
 600:	44 0f       	add	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_vTogglepin+0x3c>
 608:	ba 01       	movw	r22, r20
 60a:	62 27       	eor	r22, r18
 60c:	6b bb       	out	0x1b, r22	; 27
		break;
 60e:	08 95       	ret
		
		case'b':
		case'B':
	PORTB ^=(1<<pinNum);
 610:	28 b3       	in	r18, 0x18	; 24
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	ac 01       	movw	r20, r24
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_vTogglepin+0x5a>
 61a:	44 0f       	add	r20, r20
 61c:	55 1f       	adc	r21, r21
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_vTogglepin+0x56>
 622:	ba 01       	movw	r22, r20
 624:	62 27       	eor	r22, r18
 626:	68 bb       	out	0x18, r22	; 24
		break;
 628:	08 95       	ret
		
		case'c':
		case'C':
	PORTC ^=(1<<pinNum);
 62a:	25 b3       	in	r18, 0x15	; 21
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	ac 01       	movw	r20, r24
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_vTogglepin+0x74>
 634:	44 0f       	add	r20, r20
 636:	55 1f       	adc	r21, r21
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_vTogglepin+0x70>
 63c:	ba 01       	movw	r22, r20
 63e:	62 27       	eor	r22, r18
 640:	65 bb       	out	0x15, r22	; 21
		break;
 642:	08 95       	ret
		
		case'd':
		case'D':
	PORTD ^=(1<<pinNum);
 644:	22 b3       	in	r18, 0x12	; 18
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	ac 01       	movw	r20, r24
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_vTogglepin+0x8e>
 64e:	44 0f       	add	r20, r20
 650:	55 1f       	adc	r21, r21
 652:	6a 95       	dec	r22
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_vTogglepin+0x8a>
 656:	ba 01       	movw	r22, r20
 658:	62 27       	eor	r22, r18
 65a:	62 bb       	out	0x12, r22	; 18
 65c:	08 95       	ret

0000065e <DIO_vSetPortDir>:
}

void DIO_vSetPortDir(uint8 portNam, uint8 portVal)
{
	
	switch(portNam)
 65e:	84 34       	cpi	r24, 0x44	; 68
 660:	d9 f0       	breq	.+54     	; 0x698 <DIO_vSetPortDir+0x3a>
 662:	85 34       	cpi	r24, 0x45	; 69
 664:	38 f4       	brcc	.+14     	; 0x674 <DIO_vSetPortDir+0x16>
 666:	82 34       	cpi	r24, 0x42	; 66
 668:	99 f0       	breq	.+38     	; 0x690 <DIO_vSetPortDir+0x32>
 66a:	83 34       	cpi	r24, 0x43	; 67
 66c:	98 f4       	brcc	.+38     	; 0x694 <DIO_vSetPortDir+0x36>
 66e:	81 34       	cpi	r24, 0x41	; 65
 670:	a1 f4       	brne	.+40     	; 0x69a <DIO_vSetPortDir+0x3c>
 672:	0c c0       	rjmp	.+24     	; 0x68c <DIO_vSetPortDir+0x2e>
 674:	82 36       	cpi	r24, 0x62	; 98
 676:	61 f0       	breq	.+24     	; 0x690 <DIO_vSetPortDir+0x32>
 678:	83 36       	cpi	r24, 0x63	; 99
 67a:	18 f4       	brcc	.+6      	; 0x682 <DIO_vSetPortDir+0x24>
 67c:	81 36       	cpi	r24, 0x61	; 97
 67e:	69 f4       	brne	.+26     	; 0x69a <DIO_vSetPortDir+0x3c>
 680:	05 c0       	rjmp	.+10     	; 0x68c <DIO_vSetPortDir+0x2e>
 682:	83 36       	cpi	r24, 0x63	; 99
 684:	39 f0       	breq	.+14     	; 0x694 <DIO_vSetPortDir+0x36>
 686:	84 36       	cpi	r24, 0x64	; 100
 688:	41 f4       	brne	.+16     	; 0x69a <DIO_vSetPortDir+0x3c>
 68a:	06 c0       	rjmp	.+12     	; 0x698 <DIO_vSetPortDir+0x3a>
	{
		case'a':
		case'A':
		DDRA = portVal;
 68c:	6a bb       	out	0x1a, r22	; 26
		break;
 68e:	08 95       	ret
		
		case'b':
		case'B':
		DDRB = portVal;
 690:	67 bb       	out	0x17, r22	; 23
		break;
 692:	08 95       	ret
		
		case'c':
		case'C':
		DDRC = portVal;
 694:	64 bb       	out	0x14, r22	; 20
		break;
 696:	08 95       	ret
		
		case'd':
		case'D':
		DDRD = portVal;
 698:	61 bb       	out	0x11, r22	; 17
 69a:	08 95       	ret

0000069c <DIO_vWriteport>:
	}
}

void DIO_vWriteport(uint8 portnam, uint8 portval)
{
		switch(portnam)
 69c:	84 34       	cpi	r24, 0x44	; 68
 69e:	d9 f0       	breq	.+54     	; 0x6d6 <DIO_vWriteport+0x3a>
 6a0:	85 34       	cpi	r24, 0x45	; 69
 6a2:	38 f4       	brcc	.+14     	; 0x6b2 <DIO_vWriteport+0x16>
 6a4:	82 34       	cpi	r24, 0x42	; 66
 6a6:	99 f0       	breq	.+38     	; 0x6ce <DIO_vWriteport+0x32>
 6a8:	83 34       	cpi	r24, 0x43	; 67
 6aa:	98 f4       	brcc	.+38     	; 0x6d2 <DIO_vWriteport+0x36>
 6ac:	81 34       	cpi	r24, 0x41	; 65
 6ae:	a1 f4       	brne	.+40     	; 0x6d8 <DIO_vWriteport+0x3c>
 6b0:	0c c0       	rjmp	.+24     	; 0x6ca <DIO_vWriteport+0x2e>
 6b2:	82 36       	cpi	r24, 0x62	; 98
 6b4:	61 f0       	breq	.+24     	; 0x6ce <DIO_vWriteport+0x32>
 6b6:	83 36       	cpi	r24, 0x63	; 99
 6b8:	18 f4       	brcc	.+6      	; 0x6c0 <DIO_vWriteport+0x24>
 6ba:	81 36       	cpi	r24, 0x61	; 97
 6bc:	69 f4       	brne	.+26     	; 0x6d8 <DIO_vWriteport+0x3c>
 6be:	05 c0       	rjmp	.+10     	; 0x6ca <DIO_vWriteport+0x2e>
 6c0:	83 36       	cpi	r24, 0x63	; 99
 6c2:	39 f0       	breq	.+14     	; 0x6d2 <DIO_vWriteport+0x36>
 6c4:	84 36       	cpi	r24, 0x64	; 100
 6c6:	41 f4       	brne	.+16     	; 0x6d8 <DIO_vWriteport+0x3c>
 6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <DIO_vWriteport+0x3a>
		{
			case'a':
			case'A':
			PORTA = portval;
 6ca:	6b bb       	out	0x1b, r22	; 27
			break;
 6cc:	08 95       	ret
			
			case'b':
			case'B':
			PORTB = portval;
 6ce:	68 bb       	out	0x18, r22	; 24
			break;
 6d0:	08 95       	ret
			
			case'c':
			case'C':
			PORTC = portval;
 6d2:	65 bb       	out	0x15, r22	; 21
			break;
 6d4:	08 95       	ret
			
			case'd':
			case'D':
			PORTD = portval;
 6d6:	62 bb       	out	0x12, r22	; 18
 6d8:	08 95       	ret

000006da <EEPROM_vWrite>:
#include "EEPROM.h"

void EEPROM_vWrite(uint16 address, uint8 val)
{	
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
 6da:	e1 99       	sbic	0x1c, 1	; 28
 6dc:	fe cf       	rjmp	.-4      	; 0x6da <EEPROM_vWrite>
	
	/* Set up address and data registers */
	//EEAR = address;
	EEARH = (char) (address>>8);
 6de:	9f bb       	out	0x1f, r25	; 31
	EEARL = (char) address;
 6e0:	8e bb       	out	0x1e, r24	; 30
	
	EEDR = val;
 6e2:	6d bb       	out	0x1d, r22	; 29
	
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
 6e4:	e2 9a       	sbi	0x1c, 2	; 28
	
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
 6e6:	e1 9a       	sbi	0x1c, 1	; 28
}
 6e8:	08 95       	ret

000006ea <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
 6ea:	e1 99       	sbic	0x1c, 1	; 28
 6ec:	fe cf       	rjmp	.-4      	; 0x6ea <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
 6ee:	9f bb       	out	0x1f, r25	; 31
 6f0:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 6f2:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
 6f4:	8d b3       	in	r24, 0x1d	; 29
 6f6:	08 95       	ret

000006f8 <SPI_vInit_Slave>:
#include "std_types.h"

void SPI_vInit_Slave()
{
	/*cnfg slave*/
	CLR_BIT(SPCR,MSTR);
 6f8:	6c 98       	cbi	0x0d, 4	; 13
	/*enable spi*/
	SPCR |= (1<<SPE);
 6fa:	6e 9a       	sbi	0x0d, 6	; 13
	/*set ddr for miso*/
	DDRB |= (1<<MISO);
 6fc:	be 9a       	sbi	0x17, 6	; 23
}
 6fe:	08 95       	ret

00000700 <SPI_u8SlaveReceive>:


char SPI_u8SlaveReceive()
{
	/*chech if transmission finish*/
	while ((SPSR&(1<<SPIF)) == 0)
 700:	77 9b       	sbis	0x0e, 7	; 14
 702:	fe cf       	rjmp	.-4      	; 0x700 <SPI_u8SlaveReceive>
	{ /*wait*/}
	/*receive data*/
	return SPDR;
 704:	8f b1       	in	r24, 0x0f	; 15
 706:	08 95       	ret

00000708 <Timer0_vInit>:


void Timer0_vInit(void)
{
	/*choose ctc mode*/
	SET_BIT(TCCR0,WGM01);
 708:	83 b7       	in	r24, 0x33	; 51
 70a:	88 60       	ori	r24, 0x08	; 8
 70c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM00);
 70e:	83 b7       	in	r24, 0x33	; 51
 710:	8f 7b       	andi	r24, 0xBF	; 191
 712:	83 bf       	out	0x33, r24	; 51
	
	/*select ocr0*/
	OCR0 = 152;
 714:	88 e9       	ldi	r24, 0x98	; 152
 716:	8c bf       	out	0x3c, r24	; 60
	
	/*enable global i-bit*/
	sei();
 718:	78 94       	sei
	
	/*enable ocieo from timsk register*/
	SET_BIT(TIMSK,OCIE0);
 71a:	89 b7       	in	r24, 0x39	; 57
 71c:	82 60       	ori	r24, 0x02	; 2
 71e:	89 bf       	out	0x39, r24	; 57
	
	/*choose prescaler 1024*/
	SET_BIT(TCCR0,CS00);
 720:	83 b7       	in	r24, 0x33	; 51
 722:	81 60       	ori	r24, 0x01	; 1
 724:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 726:	83 b7       	in	r24, 0x33	; 51
 728:	84 60       	ori	r24, 0x04	; 4
 72a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
 72c:	83 b7       	in	r24, 0x33	; 51
 72e:	8d 7f       	andi	r24, 0xFD	; 253
 730:	83 bf       	out	0x33, r24	; 51
}
 732:	08 95       	ret

00000734 <PWM_vInit>:

void PWM_vInit(void)
{
	/*select phase correct pwm*/
	SET_BIT(TCCR1A,WGM10);
 734:	8f b5       	in	r24, 0x2f	; 47
 736:	81 60       	ori	r24, 0x01	; 1
 738:	8f bd       	out	0x2f, r24	; 47
	
	/*chosse noninverting mode*/
	SET_BIT(TCCR1A,COM1B1);
 73a:	8f b5       	in	r24, 0x2f	; 47
 73c:	80 62       	ori	r24, 0x20	; 32
 73e:	8f bd       	out	0x2f, r24	; 47
	
	/*chosse ocr0*/
	OCR1BL=0xff;
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	88 bd       	out	0x28, r24	; 40
	
	/*set pin to output*/
	DIO_vSetPinDir('d',4,1);
 744:	84 e6       	ldi	r24, 0x64	; 100
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	64 e0       	ldi	r22, 0x04	; 4
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	41 e0       	ldi	r20, 0x01	; 1
 74e:	50 e0       	ldi	r21, 0x00	; 0
 750:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_vSetPinDir>
	
	/*chosse prescaler /1042*/
	TCCR1B |= (1<<CS10)|(1<<CS12);
 754:	8e b5       	in	r24, 0x2e	; 46
 756:	85 60       	ori	r24, 0x05	; 5
 758:	8e bd       	out	0x2e, r24	; 46
}
 75a:	08 95       	ret

0000075c <PWM_Setduty>:

void PWM_Setduty(uint8 percentage)
{
	OCR1BL = (char)((percentage/100.0)*255);
 75c:	68 2f       	mov	r22, r24
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 b2 04 	call	0x964	; 0x964 <__floatsisf>
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	48 ec       	ldi	r20, 0xC8	; 200
 76e:	52 e4       	ldi	r21, 0x42	; 66
 770:	0e 94 1c 04 	call	0x838	; 0x838 <__divsf3>
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	4f e7       	ldi	r20, 0x7F	; 127
 77a:	53 e4       	ldi	r21, 0x43	; 67
 77c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__mulsf3>
 780:	0e 94 84 04 	call	0x908	; 0x908 <__fixunssfsi>
 784:	68 bd       	out	0x28, r22	; 40
 786:	08 95       	ret

00000788 <main>:
#include "DIO.h"
#include "SPI_SLAVE.h"

int main(void)
{
	SPI_vInit_Slave();
 788:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <SPI_vInit_Slave>
	LED_vInit('A',0);
 78c:	81 e4       	ldi	r24, 0x41	; 65
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	0e 94 3a 01 	call	0x274	; 0x274 <LED_vInit>
	LED_vInit('A',1);
 798:	81 e4       	ldi	r24, 0x41	; 65
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	0e 94 3a 01 	call	0x274	; 0x274 <LED_vInit>
	LED_vInit('A',2);
 7a4:	81 e4       	ldi	r24, 0x41	; 65
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	62 e0       	ldi	r22, 0x02	; 2
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	0e 94 3a 01 	call	0x274	; 0x274 <LED_vInit>
	uint8 temp;
    while(1)
    {
		 temp = SPI_u8SlaveReceive();
 7b0:	0e 94 80 03 	call	0x700	; 0x700 <SPI_u8SlaveReceive>
		if (temp == '1')
 7b4:	81 33       	cpi	r24, 0x31	; 49
 7b6:	a1 f4       	brne	.+40     	; 0x7e0 <main+0x58>
		{
			temp = SPI_u8SlaveReceive();
 7b8:	0e 94 80 03 	call	0x700	; 0x700 <SPI_u8SlaveReceive>
			
			if (temp == 'o')
 7bc:	8f 36       	cpi	r24, 0x6F	; 111
 7be:	39 f4       	brne	.+14     	; 0x7ce <main+0x46>
			{
				LED_vTurnon('A',0);
 7c0:	81 e4       	ldi	r24, 0x41	; 65
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	0e 94 41 01 	call	0x282	; 0x282 <LED_vTurnon>
 7cc:	f1 cf       	rjmp	.-30     	; 0x7b0 <main+0x28>
			}
			else if (temp == 'f')
 7ce:	86 36       	cpi	r24, 0x66	; 102
 7d0:	79 f7       	brne	.-34     	; 0x7b0 <main+0x28>
			{
				LED_vTurnoff('A',0);
 7d2:	81 e4       	ldi	r24, 0x41	; 65
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	0e 94 48 01 	call	0x290	; 0x290 <LED_vTurnoff>
 7de:	e8 cf       	rjmp	.-48     	; 0x7b0 <main+0x28>
			}
		}
		else if (temp == '2')
 7e0:	82 33       	cpi	r24, 0x32	; 50
 7e2:	a1 f4       	brne	.+40     	; 0x80c <main+0x84>
		{
			temp = SPI_u8SlaveReceive();
 7e4:	0e 94 80 03 	call	0x700	; 0x700 <SPI_u8SlaveReceive>
				if (temp == 'o')
 7e8:	8f 36       	cpi	r24, 0x6F	; 111
 7ea:	39 f4       	brne	.+14     	; 0x7fa <main+0x72>
				{
					LED_vTurnon('A',1);
 7ec:	81 e4       	ldi	r24, 0x41	; 65
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	61 e0       	ldi	r22, 0x01	; 1
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	0e 94 41 01 	call	0x282	; 0x282 <LED_vTurnon>
 7f8:	db cf       	rjmp	.-74     	; 0x7b0 <main+0x28>
				}
				else if (temp == 'f')
 7fa:	86 36       	cpi	r24, 0x66	; 102
 7fc:	c9 f6       	brne	.-78     	; 0x7b0 <main+0x28>
				{
					LED_vTurnoff('A',1);
 7fe:	81 e4       	ldi	r24, 0x41	; 65
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	61 e0       	ldi	r22, 0x01	; 1
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	0e 94 48 01 	call	0x290	; 0x290 <LED_vTurnoff>
 80a:	d2 cf       	rjmp	.-92     	; 0x7b0 <main+0x28>
				}
		}
		else if (temp == '3')
 80c:	83 33       	cpi	r24, 0x33	; 51
 80e:	81 f6       	brne	.-96     	; 0x7b0 <main+0x28>
		{
			temp = SPI_u8SlaveReceive();
 810:	0e 94 80 03 	call	0x700	; 0x700 <SPI_u8SlaveReceive>
			if (temp == 'o')
 814:	8f 36       	cpi	r24, 0x6F	; 111
 816:	39 f4       	brne	.+14     	; 0x826 <main+0x9e>
			{
				LED_vTurnon('A',2);
 818:	81 e4       	ldi	r24, 0x41	; 65
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	62 e0       	ldi	r22, 0x02	; 2
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	0e 94 41 01 	call	0x282	; 0x282 <LED_vTurnon>
 824:	c5 cf       	rjmp	.-118    	; 0x7b0 <main+0x28>
			}
			else if (temp == 'f')
 826:	86 36       	cpi	r24, 0x66	; 102
 828:	19 f6       	brne	.-122    	; 0x7b0 <main+0x28>
			{
				LED_vTurnoff('A',2);
 82a:	81 e4       	ldi	r24, 0x41	; 65
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	62 e0       	ldi	r22, 0x02	; 2
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	0e 94 48 01 	call	0x290	; 0x290 <LED_vTurnoff>
 836:	bc cf       	rjmp	.-136    	; 0x7b0 <main+0x28>

00000838 <__divsf3>:
 838:	0c d0       	rcall	.+24     	; 0x852 <__divsf3x>
 83a:	e6 c0       	rjmp	.+460    	; 0xa08 <__fp_round>
 83c:	de d0       	rcall	.+444    	; 0x9fa <__fp_pscB>
 83e:	40 f0       	brcs	.+16     	; 0x850 <__divsf3+0x18>
 840:	d5 d0       	rcall	.+426    	; 0x9ec <__fp_pscA>
 842:	30 f0       	brcs	.+12     	; 0x850 <__divsf3+0x18>
 844:	21 f4       	brne	.+8      	; 0x84e <__divsf3+0x16>
 846:	5f 3f       	cpi	r21, 0xFF	; 255
 848:	19 f0       	breq	.+6      	; 0x850 <__divsf3+0x18>
 84a:	c7 c0       	rjmp	.+398    	; 0x9da <__fp_inf>
 84c:	51 11       	cpse	r21, r1
 84e:	10 c1       	rjmp	.+544    	; 0xa70 <__fp_szero>
 850:	ca c0       	rjmp	.+404    	; 0x9e6 <__fp_nan>

00000852 <__divsf3x>:
 852:	eb d0       	rcall	.+470    	; 0xa2a <__fp_split3>
 854:	98 f3       	brcs	.-26     	; 0x83c <__divsf3+0x4>

00000856 <__divsf3_pse>:
 856:	99 23       	and	r25, r25
 858:	c9 f3       	breq	.-14     	; 0x84c <__divsf3+0x14>
 85a:	55 23       	and	r21, r21
 85c:	b1 f3       	breq	.-20     	; 0x84a <__divsf3+0x12>
 85e:	95 1b       	sub	r25, r21
 860:	55 0b       	sbc	r21, r21
 862:	bb 27       	eor	r27, r27
 864:	aa 27       	eor	r26, r26
 866:	62 17       	cp	r22, r18
 868:	73 07       	cpc	r23, r19
 86a:	84 07       	cpc	r24, r20
 86c:	38 f0       	brcs	.+14     	; 0x87c <__stack+0x1d>
 86e:	9f 5f       	subi	r25, 0xFF	; 255
 870:	5f 4f       	sbci	r21, 0xFF	; 255
 872:	22 0f       	add	r18, r18
 874:	33 1f       	adc	r19, r19
 876:	44 1f       	adc	r20, r20
 878:	aa 1f       	adc	r26, r26
 87a:	a9 f3       	breq	.-22     	; 0x866 <__stack+0x7>
 87c:	33 d0       	rcall	.+102    	; 0x8e4 <__stack+0x85>
 87e:	0e 2e       	mov	r0, r30
 880:	3a f0       	brmi	.+14     	; 0x890 <__stack+0x31>
 882:	e0 e8       	ldi	r30, 0x80	; 128
 884:	30 d0       	rcall	.+96     	; 0x8e6 <__stack+0x87>
 886:	91 50       	subi	r25, 0x01	; 1
 888:	50 40       	sbci	r21, 0x00	; 0
 88a:	e6 95       	lsr	r30
 88c:	00 1c       	adc	r0, r0
 88e:	ca f7       	brpl	.-14     	; 0x882 <__stack+0x23>
 890:	29 d0       	rcall	.+82     	; 0x8e4 <__stack+0x85>
 892:	fe 2f       	mov	r31, r30
 894:	27 d0       	rcall	.+78     	; 0x8e4 <__stack+0x85>
 896:	66 0f       	add	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	bb 1f       	adc	r27, r27
 89e:	26 17       	cp	r18, r22
 8a0:	37 07       	cpc	r19, r23
 8a2:	48 07       	cpc	r20, r24
 8a4:	ab 07       	cpc	r26, r27
 8a6:	b0 e8       	ldi	r27, 0x80	; 128
 8a8:	09 f0       	breq	.+2      	; 0x8ac <__stack+0x4d>
 8aa:	bb 0b       	sbc	r27, r27
 8ac:	80 2d       	mov	r24, r0
 8ae:	bf 01       	movw	r22, r30
 8b0:	ff 27       	eor	r31, r31
 8b2:	93 58       	subi	r25, 0x83	; 131
 8b4:	5f 4f       	sbci	r21, 0xFF	; 255
 8b6:	2a f0       	brmi	.+10     	; 0x8c2 <__stack+0x63>
 8b8:	9e 3f       	cpi	r25, 0xFE	; 254
 8ba:	51 05       	cpc	r21, r1
 8bc:	68 f0       	brcs	.+26     	; 0x8d8 <__stack+0x79>
 8be:	8d c0       	rjmp	.+282    	; 0x9da <__fp_inf>
 8c0:	d7 c0       	rjmp	.+430    	; 0xa70 <__fp_szero>
 8c2:	5f 3f       	cpi	r21, 0xFF	; 255
 8c4:	ec f3       	brlt	.-6      	; 0x8c0 <__stack+0x61>
 8c6:	98 3e       	cpi	r25, 0xE8	; 232
 8c8:	dc f3       	brlt	.-10     	; 0x8c0 <__stack+0x61>
 8ca:	86 95       	lsr	r24
 8cc:	77 95       	ror	r23
 8ce:	67 95       	ror	r22
 8d0:	b7 95       	ror	r27
 8d2:	f7 95       	ror	r31
 8d4:	9f 5f       	subi	r25, 0xFF	; 255
 8d6:	c9 f7       	brne	.-14     	; 0x8ca <__stack+0x6b>
 8d8:	88 0f       	add	r24, r24
 8da:	91 1d       	adc	r25, r1
 8dc:	96 95       	lsr	r25
 8de:	87 95       	ror	r24
 8e0:	97 f9       	bld	r25, 7
 8e2:	08 95       	ret
 8e4:	e1 e0       	ldi	r30, 0x01	; 1
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	bb 1f       	adc	r27, r27
 8ee:	62 17       	cp	r22, r18
 8f0:	73 07       	cpc	r23, r19
 8f2:	84 07       	cpc	r24, r20
 8f4:	ba 07       	cpc	r27, r26
 8f6:	20 f0       	brcs	.+8      	; 0x900 <__stack+0xa1>
 8f8:	62 1b       	sub	r22, r18
 8fa:	73 0b       	sbc	r23, r19
 8fc:	84 0b       	sbc	r24, r20
 8fe:	ba 0b       	sbc	r27, r26
 900:	ee 1f       	adc	r30, r30
 902:	88 f7       	brcc	.-30     	; 0x8e6 <__stack+0x87>
 904:	e0 95       	com	r30
 906:	08 95       	ret

00000908 <__fixunssfsi>:
 908:	98 d0       	rcall	.+304    	; 0xa3a <__fp_splitA>
 90a:	88 f0       	brcs	.+34     	; 0x92e <__fixunssfsi+0x26>
 90c:	9f 57       	subi	r25, 0x7F	; 127
 90e:	90 f0       	brcs	.+36     	; 0x934 <__fixunssfsi+0x2c>
 910:	b9 2f       	mov	r27, r25
 912:	99 27       	eor	r25, r25
 914:	b7 51       	subi	r27, 0x17	; 23
 916:	a0 f0       	brcs	.+40     	; 0x940 <__fixunssfsi+0x38>
 918:	d1 f0       	breq	.+52     	; 0x94e <__fixunssfsi+0x46>
 91a:	66 0f       	add	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	1a f0       	brmi	.+6      	; 0x92a <__fixunssfsi+0x22>
 924:	ba 95       	dec	r27
 926:	c9 f7       	brne	.-14     	; 0x91a <__fixunssfsi+0x12>
 928:	12 c0       	rjmp	.+36     	; 0x94e <__fixunssfsi+0x46>
 92a:	b1 30       	cpi	r27, 0x01	; 1
 92c:	81 f0       	breq	.+32     	; 0x94e <__fixunssfsi+0x46>
 92e:	9f d0       	rcall	.+318    	; 0xa6e <__fp_zero>
 930:	b1 e0       	ldi	r27, 0x01	; 1
 932:	08 95       	ret
 934:	9c c0       	rjmp	.+312    	; 0xa6e <__fp_zero>
 936:	67 2f       	mov	r22, r23
 938:	78 2f       	mov	r23, r24
 93a:	88 27       	eor	r24, r24
 93c:	b8 5f       	subi	r27, 0xF8	; 248
 93e:	39 f0       	breq	.+14     	; 0x94e <__fixunssfsi+0x46>
 940:	b9 3f       	cpi	r27, 0xF9	; 249
 942:	cc f3       	brlt	.-14     	; 0x936 <__fixunssfsi+0x2e>
 944:	86 95       	lsr	r24
 946:	77 95       	ror	r23
 948:	67 95       	ror	r22
 94a:	b3 95       	inc	r27
 94c:	d9 f7       	brne	.-10     	; 0x944 <__fixunssfsi+0x3c>
 94e:	3e f4       	brtc	.+14     	; 0x95e <__fixunssfsi+0x56>
 950:	90 95       	com	r25
 952:	80 95       	com	r24
 954:	70 95       	com	r23
 956:	61 95       	neg	r22
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	8f 4f       	sbci	r24, 0xFF	; 255
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	08 95       	ret

00000960 <__floatunsisf>:
 960:	e8 94       	clt
 962:	09 c0       	rjmp	.+18     	; 0x976 <__floatsisf+0x12>

00000964 <__floatsisf>:
 964:	97 fb       	bst	r25, 7
 966:	3e f4       	brtc	.+14     	; 0x976 <__floatsisf+0x12>
 968:	90 95       	com	r25
 96a:	80 95       	com	r24
 96c:	70 95       	com	r23
 96e:	61 95       	neg	r22
 970:	7f 4f       	sbci	r23, 0xFF	; 255
 972:	8f 4f       	sbci	r24, 0xFF	; 255
 974:	9f 4f       	sbci	r25, 0xFF	; 255
 976:	99 23       	and	r25, r25
 978:	a9 f0       	breq	.+42     	; 0x9a4 <__floatsisf+0x40>
 97a:	f9 2f       	mov	r31, r25
 97c:	96 e9       	ldi	r25, 0x96	; 150
 97e:	bb 27       	eor	r27, r27
 980:	93 95       	inc	r25
 982:	f6 95       	lsr	r31
 984:	87 95       	ror	r24
 986:	77 95       	ror	r23
 988:	67 95       	ror	r22
 98a:	b7 95       	ror	r27
 98c:	f1 11       	cpse	r31, r1
 98e:	f8 cf       	rjmp	.-16     	; 0x980 <__floatsisf+0x1c>
 990:	fa f4       	brpl	.+62     	; 0x9d0 <__floatsisf+0x6c>
 992:	bb 0f       	add	r27, r27
 994:	11 f4       	brne	.+4      	; 0x99a <__floatsisf+0x36>
 996:	60 ff       	sbrs	r22, 0
 998:	1b c0       	rjmp	.+54     	; 0x9d0 <__floatsisf+0x6c>
 99a:	6f 5f       	subi	r22, 0xFF	; 255
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	16 c0       	rjmp	.+44     	; 0x9d0 <__floatsisf+0x6c>
 9a4:	88 23       	and	r24, r24
 9a6:	11 f0       	breq	.+4      	; 0x9ac <__floatsisf+0x48>
 9a8:	96 e9       	ldi	r25, 0x96	; 150
 9aa:	11 c0       	rjmp	.+34     	; 0x9ce <__floatsisf+0x6a>
 9ac:	77 23       	and	r23, r23
 9ae:	21 f0       	breq	.+8      	; 0x9b8 <__floatsisf+0x54>
 9b0:	9e e8       	ldi	r25, 0x8E	; 142
 9b2:	87 2f       	mov	r24, r23
 9b4:	76 2f       	mov	r23, r22
 9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <__floatsisf+0x5e>
 9b8:	66 23       	and	r22, r22
 9ba:	71 f0       	breq	.+28     	; 0x9d8 <__floatsisf+0x74>
 9bc:	96 e8       	ldi	r25, 0x86	; 134
 9be:	86 2f       	mov	r24, r22
 9c0:	70 e0       	ldi	r23, 0x00	; 0
 9c2:	60 e0       	ldi	r22, 0x00	; 0
 9c4:	2a f0       	brmi	.+10     	; 0x9d0 <__floatsisf+0x6c>
 9c6:	9a 95       	dec	r25
 9c8:	66 0f       	add	r22, r22
 9ca:	77 1f       	adc	r23, r23
 9cc:	88 1f       	adc	r24, r24
 9ce:	da f7       	brpl	.-10     	; 0x9c6 <__floatsisf+0x62>
 9d0:	88 0f       	add	r24, r24
 9d2:	96 95       	lsr	r25
 9d4:	87 95       	ror	r24
 9d6:	97 f9       	bld	r25, 7
 9d8:	08 95       	ret

000009da <__fp_inf>:
 9da:	97 f9       	bld	r25, 7
 9dc:	9f 67       	ori	r25, 0x7F	; 127
 9de:	80 e8       	ldi	r24, 0x80	; 128
 9e0:	70 e0       	ldi	r23, 0x00	; 0
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	08 95       	ret

000009e6 <__fp_nan>:
 9e6:	9f ef       	ldi	r25, 0xFF	; 255
 9e8:	80 ec       	ldi	r24, 0xC0	; 192
 9ea:	08 95       	ret

000009ec <__fp_pscA>:
 9ec:	00 24       	eor	r0, r0
 9ee:	0a 94       	dec	r0
 9f0:	16 16       	cp	r1, r22
 9f2:	17 06       	cpc	r1, r23
 9f4:	18 06       	cpc	r1, r24
 9f6:	09 06       	cpc	r0, r25
 9f8:	08 95       	ret

000009fa <__fp_pscB>:
 9fa:	00 24       	eor	r0, r0
 9fc:	0a 94       	dec	r0
 9fe:	12 16       	cp	r1, r18
 a00:	13 06       	cpc	r1, r19
 a02:	14 06       	cpc	r1, r20
 a04:	05 06       	cpc	r0, r21
 a06:	08 95       	ret

00000a08 <__fp_round>:
 a08:	09 2e       	mov	r0, r25
 a0a:	03 94       	inc	r0
 a0c:	00 0c       	add	r0, r0
 a0e:	11 f4       	brne	.+4      	; 0xa14 <__fp_round+0xc>
 a10:	88 23       	and	r24, r24
 a12:	52 f0       	brmi	.+20     	; 0xa28 <__fp_round+0x20>
 a14:	bb 0f       	add	r27, r27
 a16:	40 f4       	brcc	.+16     	; 0xa28 <__fp_round+0x20>
 a18:	bf 2b       	or	r27, r31
 a1a:	11 f4       	brne	.+4      	; 0xa20 <__fp_round+0x18>
 a1c:	60 ff       	sbrs	r22, 0
 a1e:	04 c0       	rjmp	.+8      	; 0xa28 <__fp_round+0x20>
 a20:	6f 5f       	subi	r22, 0xFF	; 255
 a22:	7f 4f       	sbci	r23, 0xFF	; 255
 a24:	8f 4f       	sbci	r24, 0xFF	; 255
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
 a28:	08 95       	ret

00000a2a <__fp_split3>:
 a2a:	57 fd       	sbrc	r21, 7
 a2c:	90 58       	subi	r25, 0x80	; 128
 a2e:	44 0f       	add	r20, r20
 a30:	55 1f       	adc	r21, r21
 a32:	59 f0       	breq	.+22     	; 0xa4a <__fp_splitA+0x10>
 a34:	5f 3f       	cpi	r21, 0xFF	; 255
 a36:	71 f0       	breq	.+28     	; 0xa54 <__fp_splitA+0x1a>
 a38:	47 95       	ror	r20

00000a3a <__fp_splitA>:
 a3a:	88 0f       	add	r24, r24
 a3c:	97 fb       	bst	r25, 7
 a3e:	99 1f       	adc	r25, r25
 a40:	61 f0       	breq	.+24     	; 0xa5a <__fp_splitA+0x20>
 a42:	9f 3f       	cpi	r25, 0xFF	; 255
 a44:	79 f0       	breq	.+30     	; 0xa64 <__fp_splitA+0x2a>
 a46:	87 95       	ror	r24
 a48:	08 95       	ret
 a4a:	12 16       	cp	r1, r18
 a4c:	13 06       	cpc	r1, r19
 a4e:	14 06       	cpc	r1, r20
 a50:	55 1f       	adc	r21, r21
 a52:	f2 cf       	rjmp	.-28     	; 0xa38 <__fp_split3+0xe>
 a54:	46 95       	lsr	r20
 a56:	f1 df       	rcall	.-30     	; 0xa3a <__fp_splitA>
 a58:	08 c0       	rjmp	.+16     	; 0xa6a <__fp_splitA+0x30>
 a5a:	16 16       	cp	r1, r22
 a5c:	17 06       	cpc	r1, r23
 a5e:	18 06       	cpc	r1, r24
 a60:	99 1f       	adc	r25, r25
 a62:	f1 cf       	rjmp	.-30     	; 0xa46 <__fp_splitA+0xc>
 a64:	86 95       	lsr	r24
 a66:	71 05       	cpc	r23, r1
 a68:	61 05       	cpc	r22, r1
 a6a:	08 94       	sec
 a6c:	08 95       	ret

00000a6e <__fp_zero>:
 a6e:	e8 94       	clt

00000a70 <__fp_szero>:
 a70:	bb 27       	eor	r27, r27
 a72:	66 27       	eor	r22, r22
 a74:	77 27       	eor	r23, r23
 a76:	cb 01       	movw	r24, r22
 a78:	97 f9       	bld	r25, 7
 a7a:	08 95       	ret

00000a7c <__mulsf3>:
 a7c:	0b d0       	rcall	.+22     	; 0xa94 <__mulsf3x>
 a7e:	c4 cf       	rjmp	.-120    	; 0xa08 <__fp_round>
 a80:	b5 df       	rcall	.-150    	; 0x9ec <__fp_pscA>
 a82:	28 f0       	brcs	.+10     	; 0xa8e <__mulsf3+0x12>
 a84:	ba df       	rcall	.-140    	; 0x9fa <__fp_pscB>
 a86:	18 f0       	brcs	.+6      	; 0xa8e <__mulsf3+0x12>
 a88:	95 23       	and	r25, r21
 a8a:	09 f0       	breq	.+2      	; 0xa8e <__mulsf3+0x12>
 a8c:	a6 cf       	rjmp	.-180    	; 0x9da <__fp_inf>
 a8e:	ab cf       	rjmp	.-170    	; 0x9e6 <__fp_nan>
 a90:	11 24       	eor	r1, r1
 a92:	ee cf       	rjmp	.-36     	; 0xa70 <__fp_szero>

00000a94 <__mulsf3x>:
 a94:	ca df       	rcall	.-108    	; 0xa2a <__fp_split3>
 a96:	a0 f3       	brcs	.-24     	; 0xa80 <__mulsf3+0x4>

00000a98 <__mulsf3_pse>:
 a98:	95 9f       	mul	r25, r21
 a9a:	d1 f3       	breq	.-12     	; 0xa90 <__mulsf3+0x14>
 a9c:	95 0f       	add	r25, r21
 a9e:	50 e0       	ldi	r21, 0x00	; 0
 aa0:	55 1f       	adc	r21, r21
 aa2:	62 9f       	mul	r22, r18
 aa4:	f0 01       	movw	r30, r0
 aa6:	72 9f       	mul	r23, r18
 aa8:	bb 27       	eor	r27, r27
 aaa:	f0 0d       	add	r31, r0
 aac:	b1 1d       	adc	r27, r1
 aae:	63 9f       	mul	r22, r19
 ab0:	aa 27       	eor	r26, r26
 ab2:	f0 0d       	add	r31, r0
 ab4:	b1 1d       	adc	r27, r1
 ab6:	aa 1f       	adc	r26, r26
 ab8:	64 9f       	mul	r22, r20
 aba:	66 27       	eor	r22, r22
 abc:	b0 0d       	add	r27, r0
 abe:	a1 1d       	adc	r26, r1
 ac0:	66 1f       	adc	r22, r22
 ac2:	82 9f       	mul	r24, r18
 ac4:	22 27       	eor	r18, r18
 ac6:	b0 0d       	add	r27, r0
 ac8:	a1 1d       	adc	r26, r1
 aca:	62 1f       	adc	r22, r18
 acc:	73 9f       	mul	r23, r19
 ace:	b0 0d       	add	r27, r0
 ad0:	a1 1d       	adc	r26, r1
 ad2:	62 1f       	adc	r22, r18
 ad4:	83 9f       	mul	r24, r19
 ad6:	a0 0d       	add	r26, r0
 ad8:	61 1d       	adc	r22, r1
 ada:	22 1f       	adc	r18, r18
 adc:	74 9f       	mul	r23, r20
 ade:	33 27       	eor	r19, r19
 ae0:	a0 0d       	add	r26, r0
 ae2:	61 1d       	adc	r22, r1
 ae4:	23 1f       	adc	r18, r19
 ae6:	84 9f       	mul	r24, r20
 ae8:	60 0d       	add	r22, r0
 aea:	21 1d       	adc	r18, r1
 aec:	82 2f       	mov	r24, r18
 aee:	76 2f       	mov	r23, r22
 af0:	6a 2f       	mov	r22, r26
 af2:	11 24       	eor	r1, r1
 af4:	9f 57       	subi	r25, 0x7F	; 127
 af6:	50 40       	sbci	r21, 0x00	; 0
 af8:	8a f0       	brmi	.+34     	; 0xb1c <__mulsf3_pse+0x84>
 afa:	e1 f0       	breq	.+56     	; 0xb34 <__mulsf3_pse+0x9c>
 afc:	88 23       	and	r24, r24
 afe:	4a f0       	brmi	.+18     	; 0xb12 <__mulsf3_pse+0x7a>
 b00:	ee 0f       	add	r30, r30
 b02:	ff 1f       	adc	r31, r31
 b04:	bb 1f       	adc	r27, r27
 b06:	66 1f       	adc	r22, r22
 b08:	77 1f       	adc	r23, r23
 b0a:	88 1f       	adc	r24, r24
 b0c:	91 50       	subi	r25, 0x01	; 1
 b0e:	50 40       	sbci	r21, 0x00	; 0
 b10:	a9 f7       	brne	.-22     	; 0xafc <__mulsf3_pse+0x64>
 b12:	9e 3f       	cpi	r25, 0xFE	; 254
 b14:	51 05       	cpc	r21, r1
 b16:	70 f0       	brcs	.+28     	; 0xb34 <__mulsf3_pse+0x9c>
 b18:	60 cf       	rjmp	.-320    	; 0x9da <__fp_inf>
 b1a:	aa cf       	rjmp	.-172    	; 0xa70 <__fp_szero>
 b1c:	5f 3f       	cpi	r21, 0xFF	; 255
 b1e:	ec f3       	brlt	.-6      	; 0xb1a <__mulsf3_pse+0x82>
 b20:	98 3e       	cpi	r25, 0xE8	; 232
 b22:	dc f3       	brlt	.-10     	; 0xb1a <__mulsf3_pse+0x82>
 b24:	86 95       	lsr	r24
 b26:	77 95       	ror	r23
 b28:	67 95       	ror	r22
 b2a:	b7 95       	ror	r27
 b2c:	f7 95       	ror	r31
 b2e:	e7 95       	ror	r30
 b30:	9f 5f       	subi	r25, 0xFF	; 255
 b32:	c1 f7       	brne	.-16     	; 0xb24 <__mulsf3_pse+0x8c>
 b34:	fe 2b       	or	r31, r30
 b36:	88 0f       	add	r24, r24
 b38:	91 1d       	adc	r25, r1
 b3a:	96 95       	lsr	r25
 b3c:	87 95       	ror	r24
 b3e:	97 f9       	bld	r25, 7
 b40:	08 95       	ret

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
